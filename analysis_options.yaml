analyzer:
  language:
    strict-raw-types: true
  exclude:
    - "**/*.config.dart"
    - "lib/**/*.g.dart"
    - "lib/**/*.gr.dart"
    - "lib/**/*.freezed.dart"
  errors:
    invalid_annotation_target: ignore
    unused_import: info
    use_build_context_synchronously: error
    avoid_returning_this: ignore
linter:
  rules:
    - always_use_package_imports
    - avoid_dynamic_calls
    - avoid_empty_else
    - avoid_print
    - avoid_returning_null_for_future
    # - avoid_slow_async_io # the synchronous methods are blocking
    - avoid_type_to_string
    - avoid_types_as_parameter_names
    - avoid_web_libraries_in_flutter
    # - cancel_subscriptions # there are stream to which we always listen
    # - close_sinks # there are sinks to which we always listen
    - comment_references
    - control_flow_in_finally
    # - diagnostic_describe_all_properties # time consuming (our widgets are for internal use only)
    - empty_statements
    - hash_and_equals
    - iterable_contains_unrelated_type
    - list_remove_unrelated_type
    - literal_only_boolean_expressions
    - no_adjacent_strings_in_list
    - no_duplicate_case_values
    - no_logic_in_create_state
    - prefer_void_to_null
    - test_types_in_equals
    - throw_in_finally
    - unnecessary_statements
    - unrelated_type_equality_checks
    # - unsafe_html # sometimes we need to use low-level webview api
    - use_build_context_synchronously
    - use_key_in_widget_constructors
    - valid_regexps
    - always_declare_return_types
    # - always_put_control_body_on_new_line # disabled to allow multi single-line ifs simulating swtich statement
    # - always_put_required_named_parameters_first # super.key is not required but usually goes first
    - always_require_non_null_named_parameters
    # - always_specify_types # we aren't that strict
    - annotate_overrides
    # - avoid_annotating_with_dynamic # why not?
    # - avoid_bool_literals_in_conditional_expressions # sometimes it's more readable
    # - avoid_catches_without_on_clauses # sometimes to be 'safe' we catch everything
    - avoid_catching_errors
    # - avoid_classes_with_only_static_members # 'static classes' create useful namespace to group similar things
    - avoid_double_and_int_checks
    - avoid_equals_and_hash_code_on_mutable_classes
    - avoid_escaping_inner_quotes
    - avoid_field_initializers_in_const_classes
    - avoid_final_parameters
    - avoid_function_literals_in_foreach_calls
    # - avoid_implementing_value_types # might be useful to override it
    - avoid_init_to_null
    - avoid_js_rounded_ints
    - avoid_multiple_declarations_per_line
    - avoid_null_checks_in_equality_operators
    # - avoid_positional_boolean_parameters # we use it, especially when there is only one param for a method
    - avoid_private_typedef_functions
    # - avoid_redundant_argument_values # the rule is stupid, throws error when params have the same value but different meaning
    - avoid_renaming_method_parameters
    - avoid_return_types_on_setters
    # - avoid_returning_null # with sound null-safety it's not a problem
    - avoid_returning_null_for_void
    - avoid_returning_this
    - avoid_setters_without_getters
    - avoid_shadowing_type_parameters
    - avoid_single_cascade_in_expression_statements
    - avoid_unnecessary_containers
    - avoid_unused_constructor_parameters
    - avoid_void_async
    - await_only_futures
    - camel_case_extensions
    - camel_case_types
    # - cascade_invocations # we leave it up to the programmer to decide
    - conditional_uri_does_not_exist
    - constant_identifier_names
    - curly_braces_in_flow_control_structures
    - deprecated_consistency
    - directives_ordering
    - do_not_use_environment
    - empty_catches
    - empty_constructor_bodies
    # - eol_at_end_of_file # no value for us
    - exhaustive_cases
    - file_names
    # - flutter_style_todos # we don't point to a person who must address to do, it's all our codebase
    - implementation_imports
    # - join_return_with_assignment # sometimes asignment is complex and looks bad with return
    # - leading_newlines_in_multiline_strings # we don't use multiline strings too often, lets not be harsh to them
    - library_names
    - library_prefixes
    - library_private_types_in_public_api
    # - lines_longer_than_80_chars # we use 120
    # - missing_whitespace_between_adjacent_strings # let the developer decide
    - no_leading_underscores_for_library_prefixes
    - no_runtimeType_toString
    - non_constant_identifier_names
    - noop_primitive_operations
    - null_check_on_nullable_type_parameter
    - null_closures
    # - omit_local_variable_types # we'd rather encourage to add them
    # - one_member_abstracts # repositories with single abstract methods are allowed
    - only_throw_errors
    - overridden_fields
    # - package_api_docs # our apis are internal use only
    - package_prefixed_library_names
    # - parameter_assignments # for short functions it's ok
    - prefer_adjacent_string_concatenation
    - prefer_asserts_in_initializer_lists
    # - prefer_asserts_with_message # sometimes they are self-explanatory
    - prefer_collection_literals
    - prefer_conditional_assignment
    - prefer_const_constructors
    - prefer_const_constructors_in_immutables
    - prefer_const_declarations
    - prefer_const_literals_to_create_immutables
    - prefer_constructors_over_static_methods
    - prefer_contains
    # - prefer_double_quotes # we use single quotes
    # - prefer_expression_function_bodies # sometimes it reports to use expression for functions which are longer than 1 line
    - prefer_final_fields
    - prefer_final_in_for_each
    - prefer_final_locals
    # - prefer_final_parameters # we have lint rule to avoid final parameters
    - prefer_for_elements_to_map_fromIterable
    # - prefer_foreach # we prefer old school for-loop
    - prefer_function_declarations_over_variables
    - prefer_generic_function_type_aliases
    - prefer_if_elements_to_conditional_expressions
    - prefer_if_null_operators
    - prefer_initializing_formals
    - prefer_inlined_adds
    - prefer_int_literals
    # - prefer_interpolation_to_compose_strings # sometimes concatenation looks better, let the developer decide
    - prefer_is_empty
    - prefer_is_not_empty
    - prefer_is_not_operator
    - prefer_iterable_whereType
    # - prefer_mixin # WidgetsBindingObserver is not a mixin but we'd like to use it as a mixin
    - prefer_null_aware_method_calls
    - prefer_null_aware_operators
    - prefer_single_quotes
    - prefer_spread_collections
    - prefer_typing_uninitialized_variables
    - provide_deprecation_message
    # - public_member_api_docs # our apis are internal use-only
    - recursive_getters
    - sized_box_for_whitespace
    - sized_box_shrink_expand
    - slash_for_doc_comments
    - sort_child_properties_last
    # - sort_constructors_first # we put constructors below fields
    # - sort_unnamed_constructors_first # we put constructors below fields
    - tighten_type_of_initializing_formals
    - type_annotate_public_apis
    - type_init_formals
    - unawaited_futures
    - unnecessary_await_in_return
    - unnecessary_brace_in_string_interps
    - unnecessary_const
    - unnecessary_constructor_name
    # - unnecessary_final # we'd like to use them
    - unnecessary_getters_setters
    - unnecessary_lambdas
    - unnecessary_late
    - unnecessary_new
    - unnecessary_null_aware_assignments
    - unnecessary_null_in_if_null_operators
    - unnecessary_nullable_for_final_variable_declarations
    - unnecessary_overrides
    - unnecessary_parenthesis
    - unnecessary_raw_strings
    - unnecessary_string_escapes
    - unnecessary_string_interpolations
    - unnecessary_this
    - use_colored_box
    - use_decorated_box
    - use_full_hex_values_for_flutter_colors
    - use_function_type_syntax_for_parameters
    # - use_if_null_to_convert_nulls_to_bools # we like this syntax
    - use_is_even_rather_than_modulo
    - use_late_for_private_fields_and_variables
    - use_named_constants
    - use_raw_strings
    - use_rethrow_when_possible
    # - use_setters_to_change_properties # let the developer decide
    # - use_string_buffers # let the developer decide, sometimes we like concatenation
    - use_super_parameters
    - use_test_throws_matchers
    - use_to_and_as_if_applicable
    - void_checks
    - depend_on_referenced_packages
    - package_names
    - secure_pubspec_urls
    - sort_pub_dependencies
